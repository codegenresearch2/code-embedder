import pytest\"\nfrom src.code_embedding import CodeEmbedder, ScriptMetadata, ScriptPathExtractor, ScriptContentReader, ScriptMetadataExtractor\"\n\n@pytest.mark.parametrize(\"readme_content, expected\", [\n    (\n        [\"\`python:main.py\", \"print('Hello, World!')\", \"\`\"],\n        [ScriptMetadata(readme_start=0, readme_end=2, path=\"main.py\", content=\"\")],\n    ),\n    (\n        [\"\`\", \"print('Hello, World!')\", \"\`\"],\n        [],\n    ),\n    (\n        [], [],\n    ),\n    (\n        [\"\`python\", \"print('Hello, World!')\", \"\`\"],\n        [],\n    ),\n    (\n        [\"\`python:example.py\", \"import os\", \"print('Hello, World!')\", \"\`\", \"\`\", \"print('Do not replace')\", \"\`\"],\n        [ScriptMetadata(readme_start=0, readme_end=3, path=\"example.py\", content=\"\")],\n    ),\n    (\n        [\"\`python:main.py\", \"print('Hello, World!')\", \"\`\", \"\`python:example.py\", \"import os\", \"print('Hello, World!')\", \"\`\", \"\`\", \"print('Do not replace')\", \"\`\"],\n        [\n            ScriptMetadata(readme_start=0, readme_end=2, path=\"main.py\", content=\"\"),\n            ScriptMetadata(readme_start=3, readme_end=6, path=\"example.py\", content=\"\")\n        ],\n    ),\n],\n    ids=[\n        \"one_tagged_script\",\n        \"one_untagged_script\",\n        \"empty_readme\",\n        \"one_untagged_script_language_specified\",\n        \"one_tagged_script_one_untagged_script\",\n        \"two_tagged_scripts_one_untagged_script\",\n    ],\n)\ndef test_script_path_extractor(readme_content: list[str], expected: list[ScriptMetadata]) -> None:\n    script_path_extractor = ScriptPathExtractor()\n    result = script_path_extractor.extract(readme_content=readme_content)\n    assert result == expected\n\ndef test_code_embedder_read_script_content() -> None:\n    script_metadata_extractor = ScriptMetadataExtractor()\n    script_content_reader = ScriptContentReader()\n    code_embedder = CodeEmbedder(readme_paths=['tests/data/readme.md'], script_path_extractor=ScriptPathExtractor(), script_metadata_extractor=script_metadata_extractor, script_content_reader=script_content_reader)\n    scripts = code_embedder._read_script_content(scripts=[ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='')])\n    assert scripts == [ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='print(\"Hello, World! from script\")\")]\n\ndef test_code_embedder(tmp_path) -> None:\n    original_paths = [\n        'tests/data/readme0.md',\n        'tests/data/readme1.md',\n        'tests/data/readme2.md',\n    ]\n    expected_paths = [\n        'tests/data/expected_readme0.md',\n        'tests/data/expected_readme1.md',\n        'tests/data/expected_readme2.md',\n    ]\n    temp_readme_paths = [tmp_path / f\"readme{i}.md\