import pytest\"\nfrom src.code_embedding import CodeEmbedder, ScriptMetadata, ScriptPathExtractor\"\n\n@pytest.mark.parametrize(\"readme_content, expected\", [\"\n    (\"\\`python:main.py\", \"print('Hello, World!')\", \"\\`\"),\"\n    [ScriptMetadata(readme_start=0, readme_end=2, path=\"main.py\", content=\"\")],\"\n]\"\)\"\ndef test_script_path_extractor(readme_content: list[str], expected: list[ScriptMetadata]) -> None:\"\n    script_path_extractor = ScriptPathExtractor()\"\n    result = script_path_extractor.extract(readme_content=readme_content)\"\n    assert result == expected\"\n\n\ndef test_code_embedder_read_script_content() -> None:\"\n    code_embedder = CodeEmbedder(readme_paths=['tests/data/readme.md'], script_path_extractor=ScriptPathExtractor())\"\n    scripts = code_embedder._read_script_content(scripts=[ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='')])\"\n    assert scripts == [\"\n        ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='print(\\"Hello, World! from script\\")\n')]"\n\n\ndef test_code_embedder(tmp_path) -> None:\"\n    original_paths = [\"\n        'tests/data/readme0.md',\"\n        'tests/data/readme1.md',\"\n        'tests/data/readme2.md',\"\n    ]\"\n    expected_paths = [\"\n        'tests/data/expected_readme0.md',\"\n        'tests/data/expected_readme1.md',\"\n        'tests/data/expected_readme2.md',\"\n    ]\"\n    temp_readme_paths = [tmp_path / f\"readme{i}.md\