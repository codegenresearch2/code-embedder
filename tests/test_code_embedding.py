import pytest\\\nfrom src.code_embedding import CodeEmbedder, ScriptMetadata, ScriptPathExtractor, ScriptMetadataExtractor\\\\\n\n@pytest.mark.parametrize(\"readme_content, expected\", [\\\\\n    (\\\\\n        [\"\\`python:main.py\", \"print('Hello, World!')\", \"\\`\"],\\\\\n        [ScriptMetadata(readme_start=0, readme_end=2, path=\"main.py\", content=\"\")]\\\\\n    ),\\\\\n    (\\\\\n        [\"\\`\", \"print('Hello, World!')\", \"\\`\"],\\\\\n        []\\\\\n    ),\\\\\n    (\\\\\n        [], []\\\\\n    ),\\\\\n    (\\\\\n        [\"\\`python\", \"print('Hello, World!')\", \"\\`\"],\\\\\n        []\\\\\n    ),\\\\\n    (\\\\\n        [\"\\`python:example.py\", \"import os\", \"print('Hello, World!')\", \"\\`\", \"\\`\", \"print('Do not replace')\", \"\\`\"],\\\\\n        [ScriptMetadata(readme_start=0, readme_end=3, path=\"example.py\", content=\"\")]\\\\\n    ),\\\\\n    (\\\\\n        [\"\\`python:main.py\", \"print('Hello, World!')\", \"\\`\", \"\\`python:example.py\", \"import os\", \"print('Hello, World!')\", \"\\`\", \"\\`\", \"print('Do not replace')\", \"\\`\"],\\\\\n        [\\\\\n            ScriptMetadata(readme_start=0, readme_end=2, path=\"main.py\", content=\"\"),\\\\\n            ScriptMetadata(readme_start=3, readme_end=6, path=\"example.py\", content=\"\")\\\\\n        ]\\\\\n    ),\\\\\n],\\\\\n    ids=[\"one_tagged_script\", \"one_untagged_script\", \"empty_readme\", \"one_untagged_script_language_specified\", \"one_tagged_script_one_untagged_script\", \"two_tagged_scripts_one_untagged_script\"]\\\\\n)\\\\\ndef test_code_embedder_read_script_content() -> None:\\\\\n    code_embedder = CodeEmbedder(readme_paths=['tests/data/readme.md'], script_path_extractor=ScriptPathExtractor())\\\\\n    scripts = code_embedder._read_script_content(scripts=[ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='')])\\\\\n    assert scripts == [\\\\\n        ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='print(\"Hello, World! from script\")\"]\\\\\n)\\\\\ndef test_code_embedder(tmp_path) -> None:\\\\\n    original_paths = [\\\\\n        'tests/data/readme0.md', \\\\\n        'tests/data/readme1.md', \\\\\n        'tests/data/readme2.md',\\\\\n    ]\\\\\n    expected_paths = [\\\\\n        'tests/data/expected_readme0.md', \\\\\n        'tests/data/expected_readme1.md', \\\\\n        'tests/data/expected_readme2.md',\\\\\n    ]\\\\\n    temp_readme_paths = [tmp_path / f\"readme{i}.md\