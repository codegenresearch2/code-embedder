import pytest\"nfrom src.code_embedding import CodeEmbedder, ScriptMetadata, ScriptPathExtractor, ScriptMetadataExtractor\"n\n# Import necessary classes\nfrom src.script_content_reader import ScriptContentReader\nfrom src.script_metadata_extractor import ScriptMetadataExtractor\n\n# Define a single test function for clarity\ndef test_code_embedder() -> None:\"n    # Instantiate necessary components\n    script_metadata_extractor = ScriptMetadataExtractor()\n    script_content_reader = ScriptContentReader()\n    code_embedder = CodeEmbedder(\n        readme_paths=['tests/data/readme.md'],\n        script_path_extractor=ScriptPathExtractor(),\n        script_metadata_extractor=script_metadata_extractor,\n        script_content_reader=script_content_reader\n    )\n\n    # Read script content\n    scripts = code_embedder._read_script_content(\n        scripts=[ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='')])\n\n    # Assert the expected result\n    assert scripts == [\n        ScriptMetadata(readme_start=6, readme_end=7, path='tests/data/example.py', content='print(\"Hello, World! from script\")']\n    ]\n\n# Additional function to handle temporary file paths\ndef test_code_embedder_with_tmp_path(tmp_path) -> None:\"n    # Define paths and expected results\n    original_paths = [\n        'tests/data/readme0.md', \n        'tests/data/readme1.md', \n        'tests/data/readme2.md',\n    ]\n    expected_paths = [\n        'tests/data/expected_readme0.md', \n        'tests/data/expected_readme1.md', \n        'tests/data/expected_readme2.md',\n    ]\n\n    # Create temporary copies of the original files\n    temp_readme_paths = [tmp_path / f"readme{i}.md" for i in range(len(original_paths))]\n    for original_path, temp_readme_path in zip(original_paths, temp_readme_paths):\n        with open(original_path) as readme_file:\n            temp_readme_path.write_text(readme_file.read())\n\n    # Instantiate CodeEmbedder with temporary paths\n    code_embedder = CodeEmbedder(\n        readme_paths=[str(temp_readme_path) for temp_readme_path in temp_readme_paths],\n        script_path_extractor=ScriptPathExtractor()\n    )\n\n    # Run the embedder\n    code_embedder()\n\n    # Compare expected and updated readme files\n    for expected_path, temp_readme_path in zip(expected_paths, temp_readme_paths):\n        with open(expected_path) as expected_file:\n            expected_readme_content = expected_file.readlines()\n        with open(temp_readme_path) as updated_file:\n            updated_readme_content = updated_file.readlines()\n        assert expected_readme_content == updated_readme_content\n